CS333 Spring 2016
Lab 5 (Take Home)
Goal
In this assignment, we will understand processes and signals by building a custom shell-based client for
the file server of Lab 2.
Before you start
• Read about and understand the structure of a typical shell: read an input string from the user,
fork a child, exec a command executable, wait for the child, and repeat the process. Read
about all variants of the wait and exec system calls - there are several of them, and you need to
pick different variants under diffent circumstances.
• Understand the basic structure of any shell code, e.g., the xv6 shell code.
• Read the complete lab, especially the tips and guidelines towards the end of the lab carefully, to
avoid spending too much time on some tricky parts of the lab.
A shell-based client for the file server
You will write a program called client-shell.c. When run, client-shell should ask the user
for input commands, and execute them. Most commands will require the shell to fork one or more
child processes, an xec some executable in the spawned processes. Use the string “Hello>” as your
command prompt.
Commands
Below are the commands you must implement in your shell, and a description of what the shell must do
for those commands.
• cd directoryname must cause the shell process to change its working directory. This command
should take one and only one argument; an incorrect number of arguments (e.g., commands
such as cd, cd dir1 dir2 etc.) should print an error in the shell. cd should also return an
errorifthe change directory command cannot be executed (e.g., because the directory does not
exist). For this, and all commands below, incorrect number of arguments or incorrect command
format should print an error in the shell. After such errors are printed by the shell, the shell should
not crash. It must simply move on and prompt the user for the next command.
1• server server-IP server-port should store the server IP and port details for future file
downloads. There is no need for the shell to connect an chck that the server is up and running.
An incorrect number of arguments must print an error.
• getfl filename should download the file from the remote server and print its contents to the
standard output. Note that this, and all future file download commands below, should have had
a server IP address and port specified by the server command apriori; otherwise an error must
be printed. The shell should prompt the user for the next command only after the file download
completes.
Specifying an incorrect umbe of arguments (e.g., no filename or more than one filenames) should
cause the shell to print an error and prompt for the next command. For this, and all file download
commands below, any errors that may be generated during the file download itself (e.g., socket
connection to the server failed) should also be printed out to the shell.
• getfl filename > outputfile, is similar to getfl above, except that it should download
the file and store it in the specified filename, without printing anything to sandar output.
Usage of output redirection using > with any other string format (e.g., specifying no or more than
one filenames after >) should print an error.
• getfl filename | command, is similar to getfl above, except it should cause the downloaded
file contents to be piped to some built-in Linux command (like grep), and print whatever
output comes out of the Linux command. The original file contents must not be printed to the
shell. You may assume that command is a simple Linux command without any cmplicaions
like pipes and redirections. Any errors generated during the execution of this command should be
printed in the shell. Usage of pipes with any other string format should print an error.
• getsq file1 file2 file3 ... should download the multiple files sequentially, one after
the other. The next download should start only after the previous one finishes. The file contents
should not be printed to the shell, and can be discarded after download. The shell should ask for
the next command only afte all donloads complete. At least one file name must be provided to
getsq; otherwise the shell must print an error.

• Finally, we will also read through your code to check for clarity and correctness.
4